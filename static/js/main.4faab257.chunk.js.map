{"version":3,"sources":["Redux/Actions/index.js","Components/Header.js","Services/localStorage.js","Pages/Feedback.js","Services/fetchApi.js","Pages/Game.js","Pages/Login.js","Pages/Ranking.js","Pages/Settings.js","App.js","serviceWorker.js","Redux/Reducers/gameSettings.js","Redux/Reducers/loading.js","Redux/Reducers/token.js","Redux/Reducers/userInfos.js","Redux/Reducers/index.js","Redux/Store/index.js","index.js"],"names":["isLoading","type","notLoading","setScore","score","assertion","zeroScore","Header","this","props","getName","getEmail","getScore","imageGravatar","loading","md5","toString","document","title","className","src","alt","data-testid","React","Component","connect","state","player","name","gravatarEmail","localStorage","getItem","setItem","JSON","stringify","addPlayer","list","parse","newList","getRanking","Feedback","saveRanking","email","dispatch","hash","picture","btnPlayAgain","history","push","btnRanking","assertions","onClick","fetchApi","obj","a","token","gameSettings","difficulty","category","endpoint","fetch","responseAsk","json","ask","fetchCategories","response","data","trivia_categories","he","require","Game","fetchQuestions","setState","results","index","randomBtns","setTimer","asks","quest","incorrect_answers","map","item","decode","questes","correct_answer","sorted","sort","Math","random","answers","correctAnswer","wrongAnswers","incrementIndexResults","timer","answerSelected","ind","clearInterval","timerId","setInterval","prevSt","selectAnswer","saveScore","toggleClass","backToLogin","prevProp","length","question","key","disabled","indexOf","Login","handleChange","target","value","checked","handleClick","findToken","getUserInfo","id","placeholder","onChange","console","log","getUserInfos","Ranking","btnGoHome","sortedRanking","ranking","b","Settings","sendSettings","payload","categories","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_SETTINGS","gameSettingsReducer","action","loadingReducer","tokenReducer","INITIAL_PLAYER","userInfosReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4faab257.chunk.js","sourcesContent":["export const GET_TOKEN = 'GET_TOKEN';\nexport const IS_LOADING = 'IS_LOADING';\nexport const NOT_LOADING = 'NOT_LOADING';\nexport const GET_USER_INFOS = 'GET_USER_INFOS';\nexport const GET_SCORE_INFOS = 'GET_SCORE_INFOS';\nexport const SET_GAME_SETTINGS = 'SET_GAME_SETTINGS';\nexport const SET_SCORE = 'SET_SCORE';\nexport const ZERO_SCORE = 'ZERO_SCORE';\n\nconst getToken = (token) => ({\n  type: GET_TOKEN,\n  token,\n});\n\nconst isLoading = {\n  type: IS_LOADING,\n};\n\nconst notLoading = {\n  type: NOT_LOADING,\n};\n\nexport const getUserInfos = (email, name) => ({\n  type: GET_USER_INFOS,\n  email,\n  name,\n});\n\nexport const setGameSettings = (payload) => ({\n  type: SET_GAME_SETTINGS,\n  payload,\n});\n\nexport const setScore = (score, assertion) => ({\n  type: SET_SCORE,\n  score,\n  assertion,\n});\n\nexport const zeroScore = (score) => ({\n  type: ZERO_SCORE,\n  score,\n});\n\nexport const fetchToken = () => async (dispatch) => {\n  dispatch(isLoading);\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    dispatch(getToken(data.token));\n    dispatch(notLoading);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport '../Styles/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { getName, getEmail, getScore, loading } = this.props;\n    const imageGravatar = !loading && md5(getEmail).toString();\n    document.title = `(Score: ${getScore}) Trivia Game G-16`;\n    return (\n      <div className=\"header-sect\">\n        <img\n          src={ `https://www.gravatar.com/avatar/${imageGravatar}` }\n          alt=\"nome da pessoa\"\n          data-testid=\"header-profile-picture\"\n        />\n        <h4 data-testid=\"header-player-name\">{ getName }</h4>\n        <h4 className=\"header-score\" data-testid=\"header-score\">{ getScore }</h4>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  getName: state.player.name,\n  getEmail: state.player.gravatarEmail,\n  getScore: state.player.score,\n  loading: state.isLoading,\n});\n\nHeader.propTypes = {\n  getName: PropTypes.string,\n  getEmail: PropTypes.string,\n  getScore: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Header);\n","const TRIVIA_RANKING = 'TRIVIA_RANKING';\n\nif (!localStorage.getItem(TRIVIA_RANKING)) {\n  localStorage.setItem(TRIVIA_RANKING, JSON.stringify([]));\n}\n\nexport const addPlayer = (player) => {\n  const list = JSON.parse(localStorage.getItem(TRIVIA_RANKING)) || [];\n  const newList = [...list, player];\n  localStorage.setItem(TRIVIA_RANKING, JSON.stringify(newList));\n};\n\nexport const getRanking = () => {\n  const list = JSON.parse(localStorage.getItem(TRIVIA_RANKING));\n  return list;\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { zeroScore } from '../Redux/Actions';\nimport Header from '../Components/Header';\nimport { addPlayer } from '../Services/localStorage';\nimport '../Styles/Feedback.css';\n\nclass Feedback extends React.Component {\n  saveRanking = () => {\n    const { name, score, email, dispatch } = this.props;\n    const hash = md5(email).toString();\n    const picture = `https://www.gravatar.com/avatar/${hash}`;\n    const playerRanking = {\n      name,\n      score,\n      picture,\n    };\n    addPlayer(playerRanking);\n    const aux = 0;\n    dispatch(zeroScore(aux));\n  }\n\n  btnPlayAgain = () => {\n    const { history } = this.props;\n    this.saveRanking();\n    history.push('/project-trivia-game/');\n  }\n\n  btnRanking = () => {\n    const { history } = this.props;\n    this.saveRanking();\n    history.push('/project-trivia-game/ranking');\n  }\n\n  render() {\n    const { score, assertions } = this.props;\n    const MIN_ASSERT = 3;\n    return (\n      <section className=\"feedback-page\">\n        <Header />\n        <section className=\"feedback-sect\">\n          <section className=\"feed-sect\">\n            <p data-testid=\"feedback-text\">\n              {assertions < MIN_ASSERT ? 'Could be better...' : 'Well Done!'}\n            </p>\n            <p>\n              <span>\n                Pontuação\n              </span>\n              <span data-testid=\"feedback-total-score\">\n                { score }\n              </span>\n            </p>\n            <p>\n              <span>\n                Número de acertos\n              </span>\n              <span data-testid=\"feedback-total-question\">\n                { assertions }\n              </span>\n            </p>\n          </section>\n          <section className=\"btn-sect\">\n            <button\n              data-testid=\"btn-play-again\"\n              type=\"button\"\n              onClick={ this.btnPlayAgain }\n            >\n              Play Again\n            </button>\n            <button\n              data-testid=\"btn-ranking\"\n              type=\"button\"\n              onClick={ this.btnRanking }\n            >\n              Ranking\n            </button>\n          </section>\n        </section>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n  name: state.player.name,\n  email: state.player.gravatarEmail,\n});\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n","export const fetchApi = async (obj) => {\n  const { token, gameSettings } = obj;\n  const { type, difficulty, category } = gameSettings;\n  let endpoint = 'https://opentdb.com/api.php?amount=5';\n  if (category) endpoint += `&category=${category}`;\n  if (difficulty) endpoint += `&difficulty=${difficulty}`;\n  if (type) endpoint += `&type=${type}`;\n  endpoint += `&token=${token}`;\n  const responseAsk = await fetch(endpoint);\n  const ask = await responseAsk.json();\n  return ask;\n};\n\nexport const fetchCategories = async () => {\n  const response = await fetch('https://opentdb.com/api_category.php');\n  const data = await response.json();\n  return data.trivia_categories;\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header';\nimport { fetchApi } from '../Services/fetchApi';\nimport { setScore, zeroScore } from '../Redux/Actions';\nimport '../Styles/Game.css';\n\nconst he = require('he');\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      results: [],\n      index: 0,\n      timer: 30,\n      answers: [],\n      correctAnswer: '',\n      wrongAnswers: [],\n      answerSelected: false,\n    };\n  }\n\n  componentDidUpdate(prevProp) {\n    const { loading } = this.props;\n    if (!loading && prevProp.loading !== loading) {\n      this.fetchQuestions();\n    }\n  }\n\n  fetchQuestions = async () => {\n    const { token, gameSettings } = this.props;\n    const ask = await fetchApi({ token, gameSettings });\n    this.setState({\n      results: ask.results,\n    }, () => {\n      const { results, index } = this.state;\n      this.randomBtns(results[index]);\n      this.setTimer();\n    });\n  }\n\n  // Recebe array de questões\n  randomBtns = (asks) => {\n    // Questões erradas;\n    const quest = asks.incorrect_answers.map(item => he.decode(item));\n    // Todas as questões;\n    const questes = [...quest, he.decode(asks.correct_answer)];\n    const RANDOM = 0.5;\n    const sorted = questes.sort(() => Math.random() - RANDOM);\n    // Salva questões corretas e incorretas no estado\n    this.setState({ answers: sorted,\n      correctAnswer: he.decode(asks.correct_answer),\n      wrongAnswers: quest });\n  }\n\n  incrementIndexResults = () => {\n    const MAX_LENGTH_RESULTS = 4;\n    const { history } = this.props;\n    const { index } = this.state;\n    this.setState({\n      index: index < MAX_LENGTH_RESULTS ? index + 1 : MAX_LENGTH_RESULTS,\n      timer: 30,\n      answerSelected: false,\n    }, () => {\n      const { results, index: ind } = this.state;\n      clearInterval(this.timerId);\n      this.setTimer();\n      this.randomBtns(results[ind]);\n    });\n    if (index === MAX_LENGTH_RESULTS) {\n      history.push('/project-trivia-game/feedback');\n    }\n  }\n\n  setTimer = () => {\n    const timeout = 1000;\n    this.timerId = setInterval(() => {\n      this.setState((prevSt) => ({\n        timer: prevSt.timer - 1,\n      }), () => {\n        const { timer } = this.state;\n        if (timer === 0) {\n          clearInterval(this.timerId);\n        }\n      });\n    }, timeout);\n  }\n\n  selectAnswer = (ask) => {\n    clearInterval(this.timerId);\n    this.setState({ answerSelected: true });\n    this.saveScore(ask);\n  }\n\n  saveScore = (ask) => {\n    const { correctAnswer, results, index, timer } = this.state;\n    const tres = 3;\n    const { dispatch } = this.props;\n    const { difficulty } = results[index];\n    if (ask === correctAnswer) {\n      if (difficulty === 'easy') {\n        const score = 10;\n        const aux = score + timer * 1;\n        return dispatch(setScore(aux, 1));\n      }\n      if (difficulty === 'medium') {\n        const score = 10;\n        const aux = score + timer * 2;\n        return dispatch(setScore(aux, 1));\n      }\n      if (difficulty === 'hard') {\n        const score = 10;\n        const aux = score + timer * tres;\n        return dispatch(setScore(aux, 1));\n      }\n    }\n  }\n\n  toggleClass = (ask) => {\n    const { correctAnswer, answerSelected } = this.state;\n    if (ask === correctAnswer && answerSelected) {\n      return 'correct-answer';\n    }\n    if (ask !== correctAnswer && answerSelected) {\n      return 'wrong-answer';\n    }\n  }\n\n  backToLogin = () => {\n    const { history, dispatch } = this.props;\n    dispatch(zeroScore(0));\n    history.push('/project-trivia-game/')\n  }\n\n  render() {\n    const { results, index, timer, answers, correctAnswer,\n      wrongAnswers, answerSelected } = this.state;\n    return (\n      <>\n        <Header />\n        <p className=\"timer\">{timer}</p>\n        <section className=\"game-sect\">\n          {\n            results.length > 0\n              && (\n                <div className=\"game-card\">\n                  <div className=\"question-sect\">\n                    <h3 data-testid=\"question-category\">{ results[index].category }</h3>\n                    <article>\n                      <p data-testid=\"question-text\">\n                        { he.decode(results[index].question) }\n                      </p>\n                    </article>\n                  </div>\n                  <div data-testid=\"answer-options\" className=\"answers-sect\">\n                    {answers.map((ask) => (\n                      <button\n                        key={ ask }\n                        type=\"button\"\n                        disabled={ timer === 0 }\n                        className={ this.toggleClass(ask) }\n                        data-testid={\n                          ask === correctAnswer\n                            ? 'correct-answer'\n                            : `wrong-answer-${wrongAnswers.indexOf(ask)}`\n                        }\n                        onClick={ () => this.selectAnswer(ask) }\n                      >\n                        { ask }\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )\n          }\n          <div className=\"next-btn-sect\">\n            {answerSelected && (\n              <button\n                className=\"btn-next\"\n                type=\"button\"\n                onClick={ this.incrementIndexResults }\n                data-testid=\"btn-next\"\n              >\n                Próximo\n              </button>\n            )}\n            {timer === 0 && (\n              <button\n                className=\"btn-next\"\n                type=\"button\"\n                onClick={ this.backToLogin }\n              >\n                Play Again\n              </button>\n            )}\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nGame.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  token: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  gameSettings: PropTypes.shape({\n    type: PropTypes.string,\n    category: PropTypes.node,\n    difficulty: PropTypes.string,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  loading: state.isLoading,\n  gameSettings: state.gameSettings,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FiSettings } from 'react-icons/fi';\nimport { fetchToken, getUserInfos } from '../Redux/Actions';\nimport '../Styles/Login.css';\n\nconst MIN_VALUE_INPUT = 1;\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, type } = target;\n    const value = type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick = () => {\n    const { email, name } = this.state;\n    const { findToken, history, getUserInfo } = this.props;\n\n    findToken();\n    history.push('/project-trivia-game/game');\n    getUserInfo(email, name);\n  };\n\n  render() {\n    const { history } = this.props;\n    const { name, email } = this.state;\n    return (\n      <section className=\"login-sect\">\n        <h1>\n          Wanna play\n          {' '}\n          <em>\n            Trivia?\n          </em>\n        </h1>\n        <section>\n          <input\n            name=\"name\"\n            data-testid=\"input-player-name\"\n            type=\"text\"\n            id=\"inputName\"\n            placeholder=\"Digite seu nome\"\n            value={ name }\n            onChange={ this.handleChange }\n          />\n          <input\n            type=\"email\"\n            name=\"email\"\n            data-testid=\"input-gravatar-email\"\n            placeholder=\"Digite seu email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n        </section>\n        <section className=\"login-btn-sect\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={ name.length < MIN_VALUE_INPUT || email.length < MIN_VALUE_INPUT }\n            onClick={ this.handleClick }\n          >\n            Play\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ () => history.push('/project-trivia-game/settings') }\n          >\n            <FiSettings className=\"settings-icon\" />\n          </button>\n        </section>\n      </section>\n    );\n  }\n}\n\nLogin.propTypes = {\n  findToken: PropTypes.func,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  getUserInfo: PropTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  findToken: () => dispatch(fetchToken()),\n  getUserInfo: (email, name) => dispatch(getUserInfos(email, name)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { AiOutlineHome } from 'react-icons/ai';\nimport { getRanking } from '../Services/localStorage';\nimport '../Styles/Ranking.css';\n\nclass Ranking extends React.Component {\n  btnGoHome = () => {\n    const { history } = this.props;\n    history.push('/project-trivia-game/');\n  }\n\n  sortedRanking = () => {\n    let ranking = getRanking();\n    ranking = ranking.sort((a, b) => b.score - a.score);\n    return ranking;\n  }\n\n  render() {\n    const ranking = this.sortedRanking();\n    return (\n      <section className=\"ranking-page\">\n        <p data-testid=\"ranking-title\" className=\"ranking-title\">\n          Ranking\n        </p>\n        <button\n          className=\"ranking-btn\"\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.btnGoHome }\n        >\n          <AiOutlineHome className=\"home-icon\" />\n        </button>\n        <section className=\"ranking-sect\">\n          {ranking.map(({ name, score, picture }, index) => (\n            <div key={ name } className=\"ranking-card\">\n              <img src={ picture } alt={ name } />\n              <p\n                data-testid={ `player-name-${index}` }\n                className=\"ranking-name\"\n              >\n                { name }\n              </p>\n              <p>\n                <span data-testid={ `player-score-${index}` }>{ score }</span>\n                <span> pontos</span>\n              </p>\n            </div>\n          ))}\n        </section>\n      </section>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default connect()(Ranking);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FiSave } from 'react-icons/fi';\nimport { setGameSettings } from '../Redux/Actions';\nimport { fetchCategories } from '../Services/fetchApi';\nimport '../Styles/Settings.css';\n\nclass Settings extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      type: '',\n      difficulty: '',\n      category: 0,\n      categories: [],\n    };\n  }\n\n  async componentDidMount() {\n    const categories = await fetchCategories();\n    this.setState({ categories });\n  }\n\n  sendSettings = () => {\n    const { dispatch, history } = this.props;\n    const { type, category, difficulty } = this.state;\n    dispatch(setGameSettings({ type, category, difficulty }));\n    history.push('/project-trivia-game/');\n  }\n\n  handleChange = ({ target: { value, name } }) => {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { type, difficulty, category, categories } = this.state;\n    return (\n      <section className=\"settings-sect\">\n        <h1 data-testid=\"settings-title\">Settings</h1>\n        <select name=\"category\" value={ category } onChange={ this.handleChange }>\n          {categories.map(({ id, name }) => (\n            <option value={ id } key={ id }>{ name }</option>\n          ))}\n        </select>\n        <select name=\"type\" value={ type } onChange={ this.handleChange }>\n          <option value=\"\">Select a type</option>\n          <option value=\"multiple\">Multiple choice</option>\n          <option value=\"boolean\">True or false</option>\n        </select>\n        <select name=\"difficulty\" value={ difficulty } onChange={ this.handleChange }>\n          <option value=\"\">Select a difficulty</option>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n        <button\n          type=\"button\"\n          onClick={ this.sendSettings }\n        >\n          <FiSave className=\"save-icon\" />\n        </button>\n      </section>\n    );\n  }\n}\n\nSettings.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default connect()(Settings);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Feedback from './Pages/Feedback';\nimport Game from './Pages/Game';\nimport Login from './Pages/Login';\nimport Ranking from './Pages/Ranking';\nimport Settings from './Pages/Settings';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/project-trivia-game/\" component={ Login } />\n        <Route exact path=\"/project-trivia-game/feedback\" component={ Feedback } />\n        <Route exact path=\"/project-trivia-game/ranking\" component={ Ranking } />\n        <Route path=\"/project-trivia-game/game\" component={ Game } />\n        <Route path=\"/project-trivia-game/settings\" component={ Settings } />\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_GAME_SETTINGS } from '../Actions';\n\nconst INITIAL_SETTINGS = {\n  type: '',\n  difficulty: '',\n  category: 0,\n};\n\nconst gameSettingsReducer = (state = INITIAL_SETTINGS, action) => {\n  switch (action.type) {\n  case SET_GAME_SETTINGS:\n    return {\n      ...state,\n      ...action.payload,\n    };\n  default: return state;\n  }\n};\n\nexport default gameSettingsReducer;\n","import { IS_LOADING, NOT_LOADING } from '../Actions';\n\nconst INITIAL_LOADING = false;\n\nconst loadingReducer = (state = INITIAL_LOADING, action) => {\n  switch (action.type) {\n  case IS_LOADING:\n    return true;\n\n  case NOT_LOADING:\n    return false;\n\n  default: return state;\n  }\n};\n\nexport default loadingReducer;\n","import { GET_TOKEN } from '../Actions';\n\nconst INITIAL_TOKEN = '';\n\nconst tokenReducer = (state = INITIAL_TOKEN, action) => {\n  switch (action.type) {\n  case GET_TOKEN:\n    return action.token;\n  default: return state;\n  }\n};\n\nexport default tokenReducer;\n","import { GET_USER_INFOS, SET_SCORE, ZERO_SCORE } from '../Actions';\n\nconst INITIAL_PLAYER = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst userInfosReducer = (state = INITIAL_PLAYER, action) => {\n  switch (action.type) {\n  case GET_USER_INFOS:\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.email,\n    };\n  case SET_SCORE:\n    return { ...state,\n      score: state.score + action.score,\n      assertions: state.assertions + action.assertion,\n    };\n  case ZERO_SCORE:\n    return { ...state,\n      assertions: 0,\n      score: 0,\n    };\n  default: return state;\n  }\n};\n\nexport default userInfosReducer;\n","import { combineReducers } from 'redux';\nimport gameSettingsReducer from './gameSettings';\nimport loadingReducer from './loading';\nimport tokenReducer from './token';\nimport userInfosReducer from './userInfos';\n\nconst rootReducer = combineReducers({\n  player: userInfosReducer,\n  token: tokenReducer,\n  isLoading: loadingReducer,\n  gameSettings: gameSettingsReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../Reducers';\n\nconst store = createStore(rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Redux/Store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}